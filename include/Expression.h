/*
 * Expression.h
 *
 *  Created on: Apr 3, 2015
 *      Author: cvasquez
 */

#ifndef INCLUDE_EXPRESSION_H_
#define INCLUDE_EXPRESSION_H_

#include "Statistics.h"
#include "ParseTree.h"
#include <set>

#define GT_LT_DENOMINATOR 3;

enum ExpressionType { BINARY, UNARY };

/**
 * Expression will represent an expression used in a conjunction. IE, Expression will represent
 * two operands and an operator and will be able to return the evaluation of the expression as well
 * as any other meta data related to the relation.
 */
class Expression {
protected:
	Statistics &stat;

public:
	ExpressionType type;
	int op; // the operator

	Expression();
	Expression(ExpressionType _type, Statistics &_stat, int _op);
	virtual ~Expression();

	/**
	 * Combines this relation with e if they can be combined. Returns true if this succeeds.
	 * @param e	The expression to be combined with this relation
	 * @return 	True if this could be combined with e
	 */
	virtual bool Combine(Expression &e) = 0;

	/**
	 * Returns the number of tuples generated by this expression
	 * @return	the number of tuples generated by this expression
	 */
	virtual double Tuples() = 0;

	/**
	 * Returns the number of tuples contained by the relation(s) used by this expression
	 * @return the number of tuples contained by the relation(s) used by this expression
	 */
	virtual double Numerator() = 0;

	/**
	 * Returns the number of unique attributes contained in this expression
	 * @param the number of unique attributes contained in this expression
	 */
	virtual double Denominator() = 0;
};

/**
 * This is an Expression that contains two attributes.
 */
class BinaryExpression: public Expression {
protected:
	std::string rel1, rel2;
	std::string att1, att2;
public:
	BinaryExpression();
	BinaryExpression(Statistics &_stat, std::string _rel1, std::string _att1, std::string _rel2, std::string _att2, int _op);
	virtual ~BinaryExpression();

	/**
	 * A BinaryExpression can only combine with one other Expression: A BinaryExpression that
	 * contains the same operands and operator as this Expression (ie, an identical Expression to
	 * this one)
	 */
	virtual bool Combine(Expression &e);

	/**
	 * Returns the number of tuples generated by this expression
	 * @return	the number of tuples generated by this expression
	 */
	virtual double Tuples();

	/**
	 * Returns the number of tuples contained by the relation(s) used by this expression
	 * @return the number of tuples contained by the relation(s) used by this expression
	 */
	virtual double Numerator();

	/**
	 * Returns the number of unique attributes contained in this expression
	 * @param the number of unique attributes contained in this expression
	 */
	virtual double Denominator();
};

/**
 * This is an Expression that contains a single attribute as well as a literal
 */
class UnaryExpression: public Expression {
protected:
	std::string rel;
	std::string att;
	std::set<std::string> literals;

public:
	UnaryExpression();
	UnaryExpression(Statistics &_stat, std::string _rel, std::string _att, std::string lit, int _op);
	virtual ~UnaryExpression();

	/**
	 * A Unary Expression can only combine with another UnaryExpression. The UnaryExpression must
	 * contain the same relation and attribute and use an = operator or it must be identical.
	 */
	virtual bool Combine(Expression &e);

	/**
	 * Returns the number of tuples generated by this expression
	 * @return	the number of tuples generated by this expression
	 */
	virtual double Tuples();

	/**
	 * Returns the number of tuples contained by the relation(s) used by this expression
	 * @return the number of tuples contained by the relation(s) used by this expression
	 */
	virtual double Numerator();

	/**
	 * Returns the number of unique attributes contained in this expression
	 * @param the number of unique attributes contained in this expression
	 */
	virtual double Denominator();

	/**
	 * Returns the number of literals contained in this method
	 * @return the number of literals contained in this method
	 */
	virtual int Count();
};

#endif /* INCLUDE_EXPRESSION_H_ */
