/*
 * QueryPlanner.h
 *
 *  Created on: Apr 19, 2015
 *      Author: cvasquez
 */

#ifndef INCLUDE_QUERYPLANNER_H_
#define INCLUDE_QUERYPLANNER_H_

#include "SQL.h"
#include "Statistics.h"
#include "OpNode.h"
#include <vector>
#include <string>

typedef std::vector<std::string, std::string> RelFileMap;

struct ExecutionPlan {
	OpNode *tree;	// The execution tree
	int size;		// The size of the execution tree
};

/**
 * QueryPlanner will take a SQL object and produce a OpNode tree that represents the execution plan
 * of the query provided by SQL.This QueryPlanner deals only with SELECT queries.
 */
class QueryPlanner {
protected:
	ExecutionPlan *plan;

public:
	QueryPlanner();
	virtual ~QueryPlanner();

	/**
	 * Returns the execution plan generated by the Plan method
	 * @return the execution plan generated by the Plan method or NULL if it failed to generate a
	 * plan
	 */
	virtual ExecutionPlan* GetPlan() const;

	/**
	 * Creates a plan from the provided SQL (assumed to be a SELECT query) and the provided
	 * relation->file map that will be provided to the corresponding nodes.
	 * @param sql		The SQL object that will be used to build this tree
	 * @param fileMap	The map of files that will be provided to the root nodes
	 */
	virtual void Plan(const SQL &sql, const RelFileMap &fileMap);
};

#endif /* INCLUDE_QUERYPLANNER_H_ */
