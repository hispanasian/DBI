Group Members:
Baker Bokorney
Carlos Vasquez

Build Instructions:
make (Builds the following binaries: bin/test, bin/driver, bin/main)
make test (Builds bin/test)
make driver2a (Builds bin/driver2a, the driver for Assignment 2 part I)
make driver2b (Builds bin/driver2b, the driver for Assignment 2 part II)
make main (Builds bin/main)

Run all unit tests for parts I and II:
./bin/test

Run driverX (where X corresponds to the assignment, ie 1, 2a, 2b, etc.)
./bin/driverX


File Structure:
bin - stores the binaries
build - stores all the object files
data - contains catalog and 10M directory. Also the location where the database files get written to
include - stores the header files
inputs - stores input files used to run the drivers with automation
lib - stores the google mock, google test, and dbgen libraries
src - stores all the source files
test - stores all the unit test source files

Instructions to the run drivers
The catalog is searched for in data/catalog
The tables are searched for in data/10M
The binary heap file is stored in data/*.bin
The header files for the binary heap files are stored in data/*.bin.header
Simply run './bin/driver1' or './bin/driver2a' to run the corresponding program

Advanced Makefile:
By default, make will add the -O2 flag and -w flag to optimize the compilation and silence any
warnings.
If you wish to add the -g flag instead of the -O2 flag, do:
make DEBUG=yes
If you wish to see compile warnings, do:
make WARNINGS=yes
The above commands can be combined. If you wish to add your own flags ontop of the existing compile
flags, do:
make CCFLAGS = -flag(s)
This will override any existing flags
